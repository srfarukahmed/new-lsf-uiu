openapi: 3.0.3
info:
  title: Expense Tracker API
  description: |
    A RESTful API for managing personal expenses, budgets, and categories.
    Built using Node.js, Express, MongoDB, and TypeScript.
  version: 1.0.0
  contact:
    name: Iqbal
    email: your@email.com

servers: []

tags:
  - name: Auth
    description: User authentication
  - name: Users
    description: User profile management
  - name: Expenses
    description: Expense operations
  - name: Categories
    description: Expense categories
  - name: Budgets
    description: Budget tracking

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time

    Expense:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        amount:
          type: number
        categoryId:
          type: string
        date:
          type: string
          format: date
        note:
          type: string

    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        color:
          type: string

    Budget:
      type: object
      properties:
        _id:
          type: string
        categoryId:
          type: string
        limit:
          type: number
        month:
          type: string
    Unauthorized:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Unauthorized access

    NotFound:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Resource not found
    BadRequest:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Invalid request data

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email already in use

  /auth/login:
    post:
      tags: [Auth]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials

  /auth/refresh-token:
    get:
      tags: [Auth]
      summary: Refresh access token using HTTP-only cookie
      description: |
        Issues a new access token using a refresh token stored in an HTTP-only cookie.
        The client must send cookies with the request (e.g., `withCredentials: true`).
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '403':
          description: Invalid or expired refresh token
        '401':
          description: Refresh token cookie missing

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout user and clear refresh token cookie
      description: |
        Logs the user out by clearing the HTTP-only refresh token cookie.
      responses:
        '200':
          description: Logged out successfully

  /users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/profile:
    patch:
      tags: [Users]
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                avatarUrl:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /users/change-password:
    patch:
      tags: [Users]
      summary: Change user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'

  /expenses:
    get:
      tags: [Expenses]
      summary: List all expenses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'

    post:
      tags: [Expenses]
      summary: Create a new expense
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [title, amount, categoryId, date]
              properties:
                title:
                  type: string
                amount:
                  type: number
                categoryId:
                  type: string
                date:
                  type: string
                  format: date
                note:
                  type: string
      responses:
        '201':
          description: Expense created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'

  /expenses/{id}:
    get:
      tags: [Expenses]
      summary: Get a specific expense
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expense details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '404':
          description: Expense not found

    put:
      tags: [Expenses]
      summary: Update an expense
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                amount:
                  type: number
                date:
                  type: string
                note:
                  type: string
      responses:
        '200':
          description: Updated
        '404':
          description: Not found

    delete:
      tags: [Expenses]
      summary: Delete an expense
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully

  /categories:
    get:
      tags: [Categories]
      summary: List all categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Categories list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      tags: [Categories]
      summary: Create category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [name, color]
              properties:
                name:
                  type: string
                color:
                  type: string
      responses:
        '201':
          description: Created
  /categories/{id}:
    get:
      tags: [Categories]
      summary: Get a specific category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'

    patch:
      tags: [Categories]
      summary: Update a category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                color:
                  type: string
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

    delete:
      tags: [Categories]
      summary: Delete a category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /budgets:
    get:
      tags: [Budgets]
      summary: List budgets
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Budget list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Budget'

    post:
      tags: [Budgets]
      summary: Create budget
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [categoryId, limit, month]
              properties:
                categoryId:
                  type: string
                limit:
                  type: number
                month:
                  type: string
      responses:
        '201':
          description: Created
